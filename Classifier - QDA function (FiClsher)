## ---  read data from csv
dat2<-read.csv('C',header=TRUE)
head(dat2)

## ---  calculating qda using MASS package
library(MASS)
dat2.qda<-qda(type~.,CV=TRUE,data=dat2)
summary(dat2.qda)

attributes(dat2.qda)
post <- dat2.qda$posterior

## ---  constructing discriminant function
#splitting dataset by classes
dat2.yes<-subset(dat2, type=="Yes")
dat2.no <-subset(dat2, type=="No")

#calculating covariate matrixes
cov_yes<-cov(dat2.yes[ ,!(names(dat2) == "type")])
cov_no <-cov(dat2.no[ ,!(names(dat2) == "type")])

#discriminant fumction for qda
qdf <- function(x, prior, mu, covar) 
{  
  x <- matrix(as.numeric(x), ncol=1)
  return (as.numeric( log(prior) - (0.5*t(x-mu)%*%solve(covar)%*%(x-mu)) - 0.5*log(det(covar))))
}

#discriminant functions for our dataset
qdf_yes <- function(x) {qdf(x, nrow(dat2.yes)/nrow(dat2), as.numeric(lapply(dat2.yes[,1:7], mean)), cov_yes)}
qdf_no <- function(x) { qdf(x, nrow(dat2.no)/nrow(dat2), as.numeric(lapply(dat2.no[,1:7], mean)), cov_no)}

#compare qdf with posterior prob from qdf in MASS package
for (i in 1:nrow(dat2)) {
  dat2$yes[i] = exp(qdf_yes(dat2[i, 1:7])) 
  dat2$no[i] = exp(qdf_no(dat2[i, 1:7]))
  dat2$yes[i] = dat2$yes[i]/(dat2$yes[i] + dat2$no[i])
  dat2$no[i] = 1.0 - dat2$yes[i]
}

## ---  test qdf on new entry (3a)
new_row<-matrix(c(7,187,50,33,33.9,0.826,30),1)
qdf_yes(new_row)
qdf_no(new_row)
# for "yes" class qdf value is bigger, so she has diabet


## ---  cross validation (3b)
data_test<-read.csv('',header=TRUE)
error = 0
for (i in 1:nrow(data_test)) {
  if (exp(qdf_yes(data_test[i, 1:7]))>exp(qdf_no(data_test[i, 1:7])) & data_test$type[i]=="No") {
    error = error + 1
  }
}
print("error rate is ")
print(error/nrow(data_test))


library(lattice)
max(cov_no, cov_yes)
rgb.palette <- colorRampPalette(c("red", "green"), space = "rgb")

plot_cov_yes <- levelplot(cov_yes, main="Covariation matrix for 'yes' class", xlab="", ylab="", col.regions=rgb.palette(200), at=seq(-20, 1200.0, 10))
plot_cov_no <- levelplot(cov_no, main="Covariation matrix for 'no' class", xlab="", ylab="", col.regions=rgb.palette(200), at=seq(-20, 1200.0, 10))

plot_cor_yes <- levelplot(cor(dat2.yes[ ,!(names(dat2) == "type")]), main="Correlation matrix for 'yes' class", xlab="", ylab="", col.regions=rgb.palette(120), at=seq(-1, 1, 0.1))
plot_cor_no <- levelplot(cor(dat2.no[ ,!(names(dat2) == "type")]), main="Correlation matrix for 'no' class", xlab="", ylab="", col.regions=rgb.palette(120), at=seq(-1, 1, 0.1))

print(plot_cov_yes, position=c(0.2, 0, 1, 0.5), more=TRUE)
print(plot_cov_no, position=c(0.2, 0.5, 1, 1), more=TRUE)
print(plot_cor_yes, position=c(0, 0, 0.5, 0.5), more=TRUE)
print(plot_cor_no, position=c(0, 0.5, 0.5, 1))

matr <- matrix(c(as.numeric(lapply(dat2.yes[ ,!(names(dat2) == "type")], sd)), as.numeric(lapply(dat2.no[ ,!(names(dat2) == "type")], sd))), ncol=2)
levelplot(matr, main="Standard deviations for variables in yes/no classes", xlab="", ylab="", col.regions=rgb.palette(120), cuts = 14)

